'''
Created on 2013-03-08

@author: afejes
'''

import threading

class wave():
    '''A class that stores information pertinent to a single "wave" or peak in 
    Chip-Seq or other data.  In this format, they represent a normal curve, 
    but other wave types could be created.'''
    def __init__(self, chromosome, crest, sigma, height, number):
        self.chromosome = chromosome
        self.crest = crest
        self.sigma = sigma
        self.height = height
        self.number = number

    def type(self):
        '''Always returns "Wave"'''
        return "Wave"


class WaveFileWriter(threading.Thread):
    '''A Class that handles an influx of wave objects and sends them to files.
    The order is not sorted, allowing for multiple wave producers to save to a
    single wave file writer.'''

    def type(self):
        '''Always returns "WaveFileThread"'''
        return "WaveFileThread"

    def __init__(self, filewriter, wave_queue):
        threading.Thread.__init__(self)
        self.queue = wave_queue
        self.f = filewriter

    def process_wave(self, wave):
        '''converts a wave object to a string and writes it to a file, specified
        in the __init__ function'''
        if (wave.number != None):
            self.f.write("%s\t%i\t%i\t%s\t%i\n" % (wave.chromosome, wave.crest,
                                           wave.sigma, str(round(wave.height, 2)),
                                           wave.number))
        else:
            self.f.write("%s\t%i\t%i\t%s\n" % (wave.chromosome, wave.crest,
                                           wave.sigma, str(round(wave.height, 2))))

    def run(self):
        while True:
            wave = self.queue.get()
            self.process_wave(wave)

    def start_wave_writer(self, output_path, file_name):
        self.f = open(output_path + '/' + file_name + '.waves', 'w')
        self.f.write("# This wave file was generated by WaveGenerator 0.1, written by Anthony P. Fejes\n")
        self.f.write("# Wavewriter Version: 0.1\n")
        self.f.write("# Chromosome\tcrest pos.\tstd_dev\theight\tnumber\n")

        for _i in range(1):
            self.t = WaveFileWriter(self.f, self.queue)
            self.t.setDaemon(True)
            self.t.start()

    def close_wave_writer(self):
        '''use this to close the wave file, which will also flush the buffer'''
        self.f.close()

