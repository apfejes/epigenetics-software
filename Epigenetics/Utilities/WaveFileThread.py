'''
Created on 2013-03-08

@author: afejes
'''

import Queue
import threading
import os

queue = Queue.Queue()

class wave():

    def __init__(self, chromosome, crest, sigma, height):
        self.chromosome = chromosome
        self.crest = crest
        self.sigma = sigma
        self.height = height

    def type(self):
        return "Wave"


class WaveFileWriter(threading.Thread):

    f = None
    t = None

    def type(self):
        return "WaveFileThread"

    def __init__(self, filewriter):
        threading.Thread.__init__(self)
        self.queue = queue
        if filewriter != None:
            self.f = filewriter

    def process_wave(self, wave):
        self.f.write(wave.chromosome + "\t" + str(wave.crest) + "\t" + str(wave.sigma) + "\t" + str(wave.height))

    def run(self):
        while True:
            # grabs host from queue
            wave = self.queue.get()
            self.process_wave(wave)
            # signals to queue job is done
            self.queue.task_done()


    def start_wave_writer(self):
        # spawn a pool of threads, and pass them queue instance
#        for i in range(1):
        path = os.path.dirname(os.path.abspath(__file__))
        path = path.rsplit("/", 1)
        self.f = open(path[0] + '/testdata/tmp/findwaves.waves', 'w')
        self.f.write("# This wave file was generated by WaveGenerator 0.1, written by Anthony P. Fejes\n")
        self.f.write("# Wavewriter Version: 0.1\n")
        self.f.write("# Chromosome\tcrest pos.\std_dev\theight\n")

        for _i in range(1):
            self.t = WaveFileWriter(self.f)
            self.t.setDaemon(True)
            self.t.start()


    def close_wave_writer(self):
        queue.join()
        self.queue.all_tasks_done
        self.f.close()

    def add_wave(self, chromosome, crest, std_dev, height):
        # populate queue with data
        queue.put(wave(chromosome, crest, std_dev, height))
        # wait on the queue until everything has been processed

