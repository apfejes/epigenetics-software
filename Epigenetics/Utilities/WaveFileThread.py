'''
Created on 2013-03-08

@author: afejes
'''

import threading

class wave():

    def __init__(self, chromosome, crest, sigma, height, number):
        self.chromosome = chromosome
        self.crest = crest
        self.sigma = sigma
        self.height = height
        self.number = number

    def type(self):
        return "Wave"


class WaveFileWriter(threading.Thread):

    def type(self):
        return "WaveFileThread"

    def __init__(self, filewriter, wave_queue):
        threading.Thread.__init__(self)
        self.queue = wave_queue
        self.f = filewriter

    def process_wave(self, wave):
        if (wave.number != None):
            self.f.write("%s\t%i\t%i\t%s\t%i\n" % (wave.chromosome, wave.crest,
                                           wave.sigma, str(round(wave.height, 2)),
                                           wave.number))
        else:
            self.f.write("%s\t%i\t%i\t%s\n" % (wave.chromosome, wave.crest,
                                           wave.sigma, str(round(wave.height, 2))))

    def run(self):
        while True:
            # grabs host from queue
            wave = self.queue.get()
            self.process_wave(wave)
            # signals to queue job is done
            # self.queue.task_done()

    def start_wave_writer(self, output_path, file_name):
        # spawn a pool of threads, and pass them queue instance
#        for i in range(1):
        # path = os.path.dirname(os.path.abspath(__file__))
        # path = path.rsplit("/", 1)
        # self.f = open(path[0] + '/testdata/tmp/findwaves.waves', 'w')    # currently unbuffered - remove zero to buffer
        self.f = open(output_path + '/' + file_name + '.waves', 'w')
        self.f.write("# This wave file was generated by WaveGenerator 0.1, written by Anthony P. Fejes\n")
        self.f.write("# Wavewriter Version: 0.1\n")
        self.f.write("# Chromosome\tcrest pos.\tstd_dev\theight\tnumber\n")

        for _i in range(1):
            self.t = WaveFileWriter(self.f, self.queue)
            self.t.setDaemon(True)
            self.t.start()

    def close_wave_writer(self):
        self.f.close()
#        if self.t.is_alive():
#           self.t.join()




        # wait on the queue until everything has been processed

