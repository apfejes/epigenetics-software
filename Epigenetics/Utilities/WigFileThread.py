'''
Created on 2013-03-08

@author: afejes
'''

import Queue
import threading
import MappingItem
import os

queue = Queue.Queue()



class WigFileWriter(threading.Thread):

    def __init__(self, filewriter):
        threading.Thread.__init__(self)
        self.queue = queue
        if filewriter != None:
            self.f = filewriter

    def process_map(self, item):
        self.f.write("fixedStep chrom=%s start=%i step=1\n" % (item.chr, item.start))
        for i in item.coverage_map:
            self.f.write("%i\n" % (i))


    def run(self):
        while True:
            # grabs host from queue
            map_item = self.queue.get()
            self.process_map(map_item)
            # signals to queue job is done
            self.queue.task_done()


    def start_wig_writer(self, output_path, file_name):
        path = os.path.dirname(os.path.abspath(__file__))
        path = path.rsplit("/", 1)
        self.f = open(output_path + '/' + file_name + '.wig', 'w')
        # self.f = open(path[0] + '/testdata/tmp/findwaves.wig', 'w')
        self.f.write("# This wig file was generated by WaveGenerator 0.1, written by Anthony P. Fejes\n")
        self.f.write("# Wigwriter Version: 0.1\n")
        self.f.write("track type=wiggle_0 name='waveGenerator' description='Testing Wave Generator' ")
        self.f.write("color=50,50,150 ")
        self.f.write("yLineMark=0.0 ")
        self.f.write("yLineOnOff=on ")
        self.f.write("visibility=2 ")
        self.f.write("priority=1 ")
        self.f.write("autoScale=on ")
        self.f.write("maxHeightPixels=40:40:2\n")

        self.t = WigFileWriter(self.f)
        self.t.setDaemon(True)
        self.t.start()


    def close_wig_writer(self):
        queue.join()
        if (self.f != None):
            self.f.close()

    def add_map(self, map_region, chromosome, start):
        # populate queue with data
        queue.put(MappingItem.Item(map_region, chromosome, start))
        # wait on the queue until everything has been processed
