'''
Created on 2013-03-08

@author: afejes
'''

import Queue
import threading

queue = Queue.Queue()

class item():
    coverage_map = []
    start = 0
    chr = None


    def __init__(self, cov_map, chromosome, start):
        item.coverage_map = cov_map
        item.start = start
        item.chr = chromosome

    def type(self):
        return "WigfileItem"

class WigFileWriter(threading.Thread):

    f = None
    t = None

    def __init__(self, filewriter):
        threading.Thread.__init__(self)
        self.queue = queue
        if filewriter != None:
            self.f = filewriter

    def process_map(self, item):
        self.f.write("fixedStep chrom=" + item.chr + " start=" + str(item.start) + " step=1\n")
        for i in item.coverage_map:
            self.f.write(str(i) + "\n")


    def run(self):
        while True:
            # grabs host from queue
            map_item = self.queue.get()
            self.process_map(map_item)
            # signals to queue job is done
            self.queue.task_done()


    def start_wig_writer(self):
        # spawn a pool of threads, and pass them queue instance
#        for i in range(1):
        self.f = open('/home/afejes/temp/findwaves.wig', 'w')
        self.f.write("# This wig file was generated by WaveGenerator 0.1, written by Anthony P. Fejes\n")
        self.f.write("# Wigwriter Version: 0.1\n")
        self.f.write("track type=wiggle_0 name='waveGenerator' description='Testing Wave Generator' ")
        self.f.write("color=50,50,150 ")
        self.f.write("yLineMark=0.0 ")
        self.f.write("yLineOnOff=on ")
        self.f.write("visibility=2 ")
        self.f.write("priority=1 ")
        self.f.write("autoScale=on ")
        self.f.write("maxHeightPixels=40:40:2\n")

        self.t = WigFileWriter(self.f)
        self.t.setDaemon(True)
        self.t.start()


    def close_wig_writer(self):
        queue.join()
        self.queue.all_tasks_done

        self.f.close()

    def add_map(self, map_region, chromosome, start):
        # populate queue with data
        queue.put(item(map_region, chromosome, start))
        # wait on the queue until everything has been processed

