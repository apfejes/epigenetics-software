doctype html
html
  head
  link(rel='stylesheet', href='/static/templatestyle.css', type='text/css' )
  a(href='/')
  title Epigenetics Database Browser

  
body
  #header
    a(href='/dbaccess/') 
      h1 Epigenetics Database - Query
  #subheader
      if user
        #white
          if not user.id
            a(href='/dbaccess/loginpage', class='white') log in &nbsp;
          else
            | logged in as !{user} |
            a(href='/dbaccess/logout', class='white') log out&nbsp;
      else
        a(href='/dbaccess/loginpage', class='white') log in&nbsp;  
  #wrapper
    
      #zoompan
        #selection_element
          input(type='button',value = '<<<', title="Pan left 60%", name='MoreLeft', onClick="window.open(newURL('MoreLeft'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '<<',title="Pan left 30%", name='LessLeft', onClick="window.open(newURL('LessLeft'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '--', title="Zoom Out x3", name='ZoomOutMore', onClick="window.open(newURL('ZoomOutMore'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '-',title='Zoom Out x1.5', name='ZoomOut', onClick="window.open(newURL('ZoomOut'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '+',title='Zoom In x1.5', name='ZoomIn', onClick="window.open(newURL('ZoomIn'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '++',title='Zoom In x3', name='ZoomInMore', onClick="window.open(newURL('ZoomInMore'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '>>', title="Pan right 30%", name='LessRight', onClick="window.open(newURL('LessRight'),'_self');", class = "medbutton")
        #selection_element
          input(type='button',value = '>>>', title="Pan right 60%", name='MoreRight', onClick="window.open(newURL('MoreRight'),'_self');", class = "medbutton")
             
    #left
       |!{plot}
    #right
      div(align="center")
        input(type="button", onclick='download_svg()', value='Download SVG')
      br
      form(name="main", id="main", action='/dbaccess/query_form/', method='post')
        
        input(type="hidden", id="width", name="width", value = "")
        input(type="hidden", id="height", name="height", value = "")
        input(type="hidden", id="methylation_avail", name="methylation_avail", value=methylation_list)
        input(type="hidden", id="chipseq_avail", name="chipseq_avail", value=chipseq_list)
        input(type="hidden", id="sample_index", name="sample_index", value = request.session['sample_index'])
        input(type="hidden", id="types_index", name="types_index", value = request.session['types_index'])
        input(type="hidden", id="organism_inuse", name="organism_inuse", value=organism)
        input(type="hidden", id="methylation_selected", name="methylation_selected", value=methylation_project)
        input(type="hidden", id="chipseq_selected", name="chipseq_selected", value=chipseq_project)
        input(type="hidden", id="groupby_selected", name="groupby_selected", value=groupby_selected)
        input(type="hidden", id="groupby_avail", name="groupby_avail", value=groupby)
        input(type="hidden", id="sv", name="sv", value=plot, disabled="disabled")
        fieldset
          div(align="center")
            input(type='submit',value='Query / Refresh')
          h3 Navigation
          hr
          table
            tr
              td
                label(for='organism') Organism:
              td
                select(name='organism', id='organism', onchange='update_data_by_org()', style='max-width:95px;')
                  - each org in organism_list
                    - if org == organism
                      option(value=org, selected)=org
                    - else 
                      option(value=org)=org
            tr
              td
                label(for='collection', id='collection_label') Collection:
              td
                - if collection_list
                  - var col = collection_list.items()
                  select(name='collection',id='collection', onchange='update_view()', style='max-width:95px;')
                    - for x,y in col
                      - if x == collection
                        option(value=x, selected)=y
                      - else
                        option(value=x)=y
            tr(class='groupby_group')
              td(class='groupby_group')
                label(for='groupby', class='groupby_group') Group By:
              td(class='groupby_group')
                select(name='groupby', id='groupby', class='groupby_group', style='max-width:95px;')
                  option(value='')=''
          label(for='methylation', class='methylation_group') Methylation Set:
          br(class='methylation_group')
          select(name='methylation', id='methylation', class='methylation_group', multiple="multiple", style='max-width:170px; margin-left:10px; margin-right: 0', onchange="update_groupby()")
            - var mo = methylation_list[organism]
            - each mt in mo
              - if mt == methylation_project
                option(value=mt, selected)=mt
              - else 
                option(value=mt)=mt
          br(class='chipseq_group')
          label(for='chipseq', class='chipseq_group') Chip-Seq:
          br(class='chipseq_group')
          select(name='chipseq', id='chipseq', class='chipseq_group', style='max-width:175px;  margin-left:10px; margin-right: 0;', multiple)
            - var cso = chipseq_list[organism]
            - each cs in cso
              - if cs == chipseq_project
                option(value=cs, selected)=cs
              - else
                option(value=cs)=cs
          br(class='methylation_group')
          input(type='button', class='methylation_group', type="button", onclick='edit_metadata()', style='margin-left:10px;', value="Edit Metadata")
          table
            tr
              td
                label(for='chromosome') Chr:
              td
                if chromosome
                  input(id='chromosome',size = '6', type='text', name='chromosome', value = chromosome)
                else
                  input(id='chromosome',size = '6', type='text', value='',placeholder='1,2,...X,Y', name='chromosome')
            tr
              td
                label(for='start') Start:
              td
                if start
                  input(id='start',size = '8', type='text', value=start,name='start')
                else 
                  input(id='start',size = '8', type='text', value='',name='start')
            tr
              td
                label(for='end') End:
              td
                if end
                  input(id='end', size = '8', type='text', value=end, name='end')
                else
                  input(id='end', size = '8', type='text', value='', name='end')
            tr
              td 
                label(for="gene") Jump to:
              td
                input(type="text", size = '18', placeholder="gene name or probe id", title="jump to gene", name="genename")
            
            
          h3 Options
          hr
          if organism == 'human' or organism == 'humanGEO'
            p(class="tight")
              label(for='cpg') CpG Islands:
              if cpg
                input(id='cpg', size = '8', type='checkbox', name="cpg", checked)
              else
                input(id='cpg', size = '8', type='checkbox', name="cpg")
          if collection = 'chipseq' or collection = 'methchip'
            p(class="tight")
              label(for='minheight') Minimum peak height:
              if minheight
                input(id='minheight',size = '4', type='text', name='minheight', value = minheight)
              else
                input(id='minheight',size = '4', type='text', value='0', name='minheight')
            p(class="tight")
              label(for='minsigma') Minimum peak sigma:
              if minsigma
                input(id='minsigma',size = '4', type='text', name='minsigma', value = minsigma)
              else
                input(id='minsigma',size = '4', type='text', value='0', name='minsigma')
          else
            input(type="hidden", id="minheight", name="minheight", value = '0')
            input(type="hidden", id="minsigma", name="minsigma", value = '0')
          if collection = 'methylation' or collection = "methchip"
            p(class="tight")
              label(for='datapoints') Show data points:
              if datapoints
                input(id='datapoints', size = '8', type='checkbox', name="datapoints", checked)
              else
                input(id='datapoints', size = '8', type='checkbox', name="datapoints")
            p(class="tight")
              label(for='show_dist') Show sample type distribution:
              if show_dist
                input(id='show_dist', size = '8', type='checkbox', name="show_dist", checked)
              else
                input(id='show_dist', size = '8', type='checkbox', name="show_dist")
            p(class="tight")
              label(for='show_genes') Show Genes:
              if show_genes
                input(id='show_genes', size = '8', type='checkbox', name="show_genes", checked)
              else
                input(id='show_genes', size = '8', type='checkbox', name="show_genes")
            p(class="tight")
              label(for='bigdist') Bigger Distributions:
              if bigdist
                input(id='bigdist', size = '8', type='checkbox', name="bigdist", checked)
              else
                input(id='bigdist', size = '8', type='checkbox', name="bigdist")
        
      
          h3 Index
          hr
          - var ti = request.session['types_index']
          - var sg = request.session['show_groups']
          - if ti.items
            table
              - var samples = ti.keys()
              - each s in samples
                tr 
                  td
                    font(color=ti.get(s))
                      !{s}
                  td 
                    if collection = 'methylation' or collection = "methchip"
                      if s in sg 
                        input(class="check_small", type='checkbox', form="main", name="filter_" + s, checked)
                      else
                        input(class="check_small", type='checkbox', form="main", name="filter_" + s)    
          - else     
            | No Data Found   
      h3 Legend
      hr
      p(class="tight") blue line -> SNP in Probe
      p(class="tight") red line -> SNP in CpG
      

    

script(type='text/javascript')
    document.getElementById('width').value = window.innerWidth;
    document.getElementById('height').value = window.innerHeight;

    function getselected(selectobject) {
        var results = [];
        for (var i=0; i<selectobject.options.length; i++) {
          if (selectobject.options[i].selected) {
            var option = selectobject.options[i];
            var value = option.value;
            results.push(value);
          }
        }
        return results;
    }
    
    function update_groupby() {
      var z = document.getElementById("collection");
      var collect = getselected(z)
      if (collect == "methylation" || collect == "methchip") {
        var e = document.getElementById("methylation");
        var methylation = getselected(e)
        var e = document.getElementById("groupby");
        e.options.length=0;
      
        
        if (methylation.length > 1) {
          if (groupby_selected == "project") {
            document.getElementById("groupby").options[0]=new Option('project', 'project', true, true);
            document.getElementById("groupby").options[1]=new Option('tissuetype', 'tissuetype', false, false);
          } else {
            document.getElementById("groupby").options[0]=new Option('tissuetype', 'tissuetype', true, true);
            document.getElementById("groupby").options[1]=new Option('project', 'project', false, false);
          }
        } else {
          i = 0;
          var gb_sel = groupby_selected.value
          var gb_all = JSON.parse(groupby_avail.value.replace(/'/g, '"'));
          var gb_av = gb_all[organism_inuse.value][methylation]['available']
          if (gb_av.length == 1 || !(gb_av instanceof Array)) {
            document.getElementById("groupby").options[i]=new Option(gb_av, gb_av, true, true);
          } else {
            for (gb in gb_av) {  
              if (gb_sel == gb_av[gb]) { 
                document.getElementById("groupby").options[i]=new Option(gb_av[gb], gb_av[gb], true, true);
              } else { 
                document.getElementById("groupby").options[i]=new Option(gb_av[gb], gb_av[gb], false, false);
              }
              i++;
            }
          }
        }
      }
    }



    function update_data_by_org() {
      organism_inuse.value = document.getElementById("organism").value
      var z = document.getElementById("collection");
      var collect = getselected(z)
      if (collect == "methylation" || collect == "methchip") {
        var e = document.getElementById("methylation");
        e.options.length=0;
        var mo = JSON.parse(methylation_avail.value.replace(/'/g, '"'));
        var meth_by_org = mo[organism_inuse.value];
        meth_sel = methylation_selected.value.indexOf('\'') >0 ? JSON.parse(methylation_selected.value.replace(/'/g, '"')) : methylation_selected.value;
        i = 0;
        for (pro in meth_by_org) {
          if (meth_sel.indexOf(meth_by_org[pro]) >= 0) { 
            document.getElementById("methylation").options[i]=new Option(meth_by_org[pro], meth_by_org[pro], true, true);
          } else { 
            document.getElementById("methylation").options[i]=new Option(meth_by_org[pro], meth_by_org[pro], false, false);
          }
          i++;
        }
        
        if (meth_sel == "") {
          e.options[0].selected = true
          methylation_selected.value = getselected(e);
          meth_sel = methylation_selected.value
        }
        var e = document.getElementById("groupby");
        e.options.length=0;
        
        if (meth_sel.length > 1) {
          if (groupby_selected == "project") {
            document.getElementById("groupby").options[0]=new Option('project', 'project', true, true);
            document.getElementById("groupby").options[1]=new Option('tissuetype', 'tissuetype', false, false);
          } else {
            document.getElementById("groupby").options[0]=new Option('tissuetype', 'tissuetype', true, true);
            document.getElementById("groupby").options[1]=new Option('project', 'project', false, false);
          }
        } else {
          i = 0;
          var gb_sel = groupby_selected.value
          var gb_all = JSON.parse(groupby_avail.value.replace(/'/g, '"'));
          var gb_av = gb_all[organism_inuse.value][meth_sel]['available']
          if (gb_av.length == 1 || !(gb_av instanceof Array)) {
            document.getElementById("groupby").options[i]=new Option(gb_av, gb_av, true, true);
          } else {
            for (gb in gb_av) {  
              if (gb_sel == gb_av[gb]) { 
                document.getElementById("groupby").options[i]=new Option(gb_av[gb], gb_av[gb], true, true);
              } else { 
                document.getElementById("groupby").options[i]=new Option(gb_av[gb], gb_av[gb], false, false);
              }
              i++;
            }
          }
        }
      }
      if (collect == "chipseq" || collect == "methchip") {
        var e = document.getElementById("chipseq")
        e.options.length=0;
        var cso = JSON.parse(chipseq_avail.value.replace(/'/g, '"'));
        var zzz = cso[organism_inuse.value];
        var cs_sel = chipseq_selected.value;
        i = 0;
        for (pro in zzz) {
          if (cs_sel.indexOf(zzz[pro]) >= 0) { 
            document.getElementById("chipseq").options[i]=new Option(zzz[pro], zzz[pro], true, true);
          } else { 
            document.getElementById("chipseq").options[i]=new Option(zzz[pro], zzz[pro], false, false);
          }
          i++;
        }
      }
    }

    function update_view(){
      var e = document.getElementById("collection");
      var f = '';
      if (e.value == "methchip") {
        f = document.getElementsByClassName("methylation_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }
        f = document.getElementsByClassName("chipseq_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }
        f = document.getElementsByClassName("groupby_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }
      }
      if (e.value == "methylation") {
        f = document.getElementsByClassName("methylation_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }
        f = document.getElementsByClassName("chipseq_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='none';
        }
        f = document.getElementsByClassName("groupby_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }

      }
      if (e.value == "chipseq") {
        f = document.getElementsByClassName("groupby_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='none';
        }
        f = document.getElementsByClassName("methylation_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='none';
        }
        f = document.getElementsByClassName("chipseq_group");
        for (var i = 0; i < f.length; i++) {
          f[i].style.display='';
        }
      }
    update_data_by_org();
    }


    
    function newURL(action){  
      var base = '/dbaccess/query_form/';
      var e = document.getElementById("organism");
      var organism = e.options[e.selectedIndex].value;
      var e = document.getElementById("collection");
      var collection = e.options[e.selectedIndex].value;
      var e = document.getElementById("methylation");
      var methylation = getselected(e)
      var e = document.getElementById("groupby");
      var groupby = e.options[e.selectedIndex].value;
      var e = document.getElementById("chipseq");
      var chipseq = getselected(e)
      var e = document.getElementById("minheight");
      if (e) {
        var minheight = e.value;
      }
      var e = document.getElementById("minsigma");
      if (e) {
        var minsigma = e.value;
      }
      var e = document.getElementById("cpg");
      if (e) {
        var cpg = e.checked;
      }
      var e = document.getElementById("datapoints");
      if (e) {
        var datapoints = e.checked;
      }
      var e = document.getElementById("show_dist");
      if (e) {
        var show_dist = e.checked;
      }
      var e = document.getElementById("show_genes");
      if (e) {
        var show_genes = e.checked;
      }
      var e = document.getElementById("bigdist");
      if (e) {
        var bigdist = e.checked;
      }
      
      var e = document.getElementsByClassName("check_small");
      var filters = new Array();
      for(var i=0; i< e.length; i++) {
        if (e[i].checked) { 
          filters.push(e[i].name.replace("filter_", ""));
        }
      }

      
      base += "?chromosome=" + chromosome.value
      base += "&start=" + start.value
      base += "&end=" + end.value
      base += "&organism=" + organism
      base += "&collection=" + collection
      base += "&methylation=" + encodeURIComponent(methylation)
      base += "&groupby=" + groupby
      base += "&chipseq=" + encodeURIComponent(chipseq)
      base += "&action=" + action
      if (minheight) {
        base += "&minheight=" + minheight
      }
      if (minsigma) {
        base += "&minsigma=" + minsigma
      }
      if (cpg) {
        base += "&cpg=" + cpg
      }
      if (datapoints) {
        base += "&datapoints=" + datapoints
      }
      if (show_dist) {
        base += "&show_dist=" + show_dist
      }
      if (show_genes) {
        base += "&show_genes=" + show_genes
      }
      if (bigdist) {
        base += "&bigdist=" + bigdist
      }
      base += "&width=" + window.innerWidth
      base += "&height=" + window.innerHeight
      base += "&filters=" + filters
      
      return base
    }
    
    
    function download_svg() {
    
      window.URL = window.URL || window.webkitURL;
      var a = document.createElement('a');
      var e = document.getElementById("sv");
      plot = e.value;
      var blob = new Blob([plot], {'type':'text\/plain'});
      a.href = window.URL.createObjectURL(blob);
      a.download = 'plot_area.svg';
      a.click();
      
    }
    
    function edit_metadata() {
      var base = "/dbaccess/metadata2/";
      var e = document.getElementById("organism");
      var organism = e.options[e.selectedIndex].value;
      var e = document.getElementById("collection");
      var collection = e.options[e.selectedIndex].value;

      base += "?organism=" + organism
      base += "&collection=" + collection
      
      if (collection == 'methylation') {
        var e = document.getElementById("methylation");
        var methylation = getselected(e)
        if (methylation.length > 1) {
          alert ("Cannot edit more than one data set at once")
          return
        } else if (methylation.length <1) {
          alert ("No data set selected - please select one before proceeding")
          return 
        } else {
          base += "&project=" + encodeURIComponent(methylation)
        }
      }
      if (collection == 'chipseq') {
        var e = document.getElementById("chipseq");
        var chipseq = getselected(e)
        if (chipseq.length > 1) {
          alert ("Cannot edit more than one data set at once")
          return
        } else if (chipseq.length <1) {
          alert ("No data set selected - please select one before proceeding")
          return
        } else {
          base += "&project=" + encodeURIComponent(chipseq)
        }
      }
      if (collection == 'methchip') {
        alert ("Cannot jump to edit metadata when both methylation and chipseq are selected")
        return
      }
      window.open(base)
    }
    
    
    
    
       
    update_view();
    update_data_by_org();
    
    
    
